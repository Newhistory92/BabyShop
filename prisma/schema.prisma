// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cuenta {
  id                String  @id @default(cuid())
  usuarioId         String
  tipo              String
  proveedor         String
  proveedorCuentaId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([proveedor, proveedorCuentaId])
}

model Sesion {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  usuarioId    String
  expires      DateTime
  usuario      Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Usuario {
  id             String    @id @default(cuid())
  nombre         String?
  email          String?   @unique
  emailVerificado DateTime?
  imagen         String?
  contrasenaHash String?
  esAdmin        Boolean   @default(false)
  creado         DateTime  @default(now())
  actualizado    DateTime  @updatedAt

  cuentas      Cuenta[]
  sesiones     Sesion[]
  pedidos      Pedido[]
  direcciones  Direccion[]
  favoritos    ElementoFavorito[]
}

model TokenVerificacion {
  identificador String
  token         String   @unique
  expires       DateTime

  @@unique([identificador, token])
}

model Producto {
  id              String   @id @default(cuid())
  nombre          String
  descripcion     String?  @db.Text
  precio          Int
  imagenes        String[]
  categoriaId     String
  stock           Int      @default(0)
  esNuevo         Boolean  @default(false)
  calificacion    Float?
  cantidadResenas Int      @default(0)
  creado          DateTime @default(now())
  actualizado     DateTime @updatedAt

  categoria     Categoria          @relation(fields: [categoriaId], references: [id])
  variantes     VarianteProducto[]
  etiquetasEco  ProductoEtiquetaEco[]
  resenas       Resena[]
  elementosPedido ElementoPedido[]
  favoritos     ElementoFavorito[]
}

model VarianteProducto {
  id        String   @id @default(cuid())
  nombre    String
  precio    Int
  productoId String
  stock     Int      @default(0)
  creado    DateTime @default(now())
  actualizado DateTime @updatedAt

  producto        Producto       @relation(fields: [productoId], references: [id], onDelete: Cascade)
  elementosPedido ElementoPedido[]
}

model Categoria {
  id        String   @id @default(cuid())
  nombre    String
  imagen    String?
  creado    DateTime @default(now())
  actualizado DateTime @updatedAt

  productos Producto[]
}

model EtiquetaEco {
  id        String   @id @default(cuid())
  nombre    String   @unique
  creado    DateTime @default(now())
  actualizado DateTime @updatedAt

  productos ProductoEtiquetaEco[]
}

model ProductoEtiquetaEco {
  productoId   String
  etiquetaEcoId String
  creado       DateTime @default(now())

  producto   Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  etiquetaEco EtiquetaEco @relation(fields: [etiquetaEcoId], references: [id], onDelete: Cascade)

  @@id([productoId, etiquetaEcoId])
}

model Resena {
  id             String   @id @default(cuid())
  calificacion   Int
  comentario     String?  @db.Text
  productoId     String
  usuarioId      String
  nombreUsuario  String
  imagenUsuario  String?
  creado         DateTime @default(now())
  actualizado    DateTime @updatedAt

  producto Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model Pedido {
  id            String      @id @default(cuid())
  usuarioId     String
  estado        EstadoPedido @default(PENDIENTE)
  total         Int
  costoEnvio    Int         @default(0)
  descuento     Int         @default(0)
  metodoPago    String?
  idPago        String?
  direccionId   String?
  creado        DateTime    @default(now())
  actualizado   DateTime    @updatedAt

  usuario        Usuario         @relation(fields: [usuarioId], references: [id])
  direccion      Direccion?      @relation(fields: [direccionId], references: [id])
  elementosPedido ElementoPedido[]
}

model ElementoPedido {
  id                String  @id @default(cuid())
  pedidoId          String
  productoId        String
  varianteProductoId String?
  cantidad          Int
  precio            Int

  pedido          Pedido            @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  producto        Producto          @relation(fields: [productoId], references: [id])
  varianteProducto VarianteProducto? @relation(fields: [varianteProductoId], references: [id])
}

model Direccion {
  id           String  @id @default(cuid())
  usuarioId    String
  nombre       String
  calle        String
  numero       String
  departamento String?
  ciudad       String
  provincia    String
  codigoPostal String
  pais         String
  telefono     String
  esPrincipal  Boolean @default(false)

  usuario Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedidos Pedido[]
}

model ElementoFavorito {
  id        String   @id @default(cuid())
  usuarioId String
  productoId String
  creado    DateTime @default(now())

  usuario  Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  producto Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, productoId])
}

enum EstadoPedido {
  PENDIENTE
  PROCESANDO
  ENVIADO
  ENTREGADO
  CANCELADO
}

